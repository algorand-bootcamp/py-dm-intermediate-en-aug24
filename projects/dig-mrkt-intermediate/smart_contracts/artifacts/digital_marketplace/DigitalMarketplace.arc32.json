{
    "hints": {
        "get_listings_mbr()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "allow_asset(pay,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "first_deposit(pay,axfer,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_price(asset,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy(address,asset,uint64,pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bid(address,asset,uint64,pay,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "accept_bid(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2UuYXBwcm92YWxfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgbWV0aG9kICJnZXRfbGlzdGluZ3NfbWJyKCl1aW50NjQiCiAgICBtZXRob2QgImFsbG93X2Fzc2V0KHBheSxhc3NldCl2b2lkIgogICAgbWV0aG9kICJmaXJzdF9kZXBvc2l0KHBheSxheGZlcix1aW50NjQsdWludDY0KXZvaWQiCiAgICBtZXRob2QgImRlcG9zaXQoYXhmZXIsdWludDY0KXZvaWQiCiAgICBtZXRob2QgInNldF9wcmljZShhc3NldCx1aW50NjQsdWludDY0KXZvaWQiCiAgICBtZXRob2QgImJ1eShhZGRyZXNzLGFzc2V0LHVpbnQ2NCxwYXksdWludDY0KXZvaWQiCiAgICBtZXRob2QgIndpdGhkcmF3KGFzc2V0LHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJiaWQoYWRkcmVzcyxhc3NldCx1aW50NjQscGF5LHVpbnQ2NCx1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAiYWNjZXB0X2JpZChhc3NldCx1aW50NjQpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fZ2V0X2xpc3RpbmdzX21icl9yb3V0ZUAyIG1haW5fYWxsb3dfYXNzZXRfcm91dGVAMyBtYWluX2ZpcnN0X2RlcG9zaXRfcm91dGVANCBtYWluX2RlcG9zaXRfcm91dGVANSBtYWluX3NldF9wcmljZV9yb3V0ZUA2IG1haW5fYnV5X3JvdXRlQDcgbWFpbl93aXRoZHJhd19yb3V0ZUA4IG1haW5fYmlkX3JvdXRlQDkgbWFpbl9hY2NlcHRfYmlkX3JvdXRlQDEwCiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX2dldF9saXN0aW5nc19tYnJfcm91dGVAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjY3CiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF9saXN0aW5nc19tYnIKICAgIGl0b2IKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYWxsb3dfYXNzZXRfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjcxCiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTozMQogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NzEKICAgIC8vIEBhYmltZXRob2QKICAgIGNhbGxzdWIgYWxsb3dfYXNzZXQKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZmlyc3RfZGVwb3NpdF9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6ODQKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMgogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgYXhmZXIKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBheGZlcgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6ODQKICAgIC8vIEBhYmltZXRob2QKICAgIGNhbGxzdWIgZmlyc3RfZGVwb3NpdAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9kZXBvc2l0X3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTUKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGF4ZmVyCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXhmZXIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjExNQogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBkZXBvc2l0CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3NldF9wcmljZV9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTMxCiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTozMQogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBc3NldHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzMQogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRfcHJpY2UKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYnV5X3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNDMKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNDMKICAgIC8vIEBhYmltZXRob2QKICAgIGNhbGxzdWIgYnV5CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3dpdGhkcmF3X3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNzYKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTc2CiAgICAvLyBAYWJpbWV0aG9kCiAgICBjYWxsc3ViIHdpdGhkcmF3CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JpZF9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjA1CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTozMQogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBc3NldHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjA1CiAgICAvLyBAYWJpbWV0aG9kCiAgICBjYWxsc3ViIGJpZAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hY2NlcHRfYmlkX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjQxCiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTozMQogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBc3NldHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI0MQogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBhY2NlcHRfYmlkCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyByZWplY3QgdHJhbnNhY3Rpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2UuZ2V0X2xpc3RpbmdzX21icigpIC0+IHVpbnQ2NDoKZ2V0X2xpc3RpbmdzX21icjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjY3LTY4CiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X2xpc3RpbmdzX21icihzZWxmKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjY5CiAgICAvLyByZXR1cm4gc2VsZi5saXN0aW5nc19ib3hfbWJyKCkKICAgIGNhbGxzdWIgbGlzdGluZ3NfYm94X21icgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLmxpc3RpbmdzX2JveF9tYnIoKSAtPiB1aW50NjQ6Cmxpc3RpbmdzX2JveF9tYnI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTozNS0zNgogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBsaXN0aW5nc19ib3hfbWJyKHNlbGYpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDAgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MzgtNDgKICAgIC8vIDJfNTAwCiAgICAvLyArICgKICAgIC8vICAgICAjIGZtdDogb2ZmCiAgICAvLyAgICAgIyBLZXkgbGVuZ3RoCiAgICAvLyAgICAgc2VsZi5saXN0aW5ncy5rZXlfcHJlZml4Lmxlbmd0aCArCiAgICAvLyAgICAgMzIgKyA4ICsgOCArCiAgICAvLyAgICAgIyBWYWx1ZSBsZW5ndGgKICAgIC8vICAgICA4ICsgOCArIDMyICsgOCArIDgKICAgIC8vICAgICAjIGZtdDogb24KICAgIC8vICkKICAgIC8vICogNDAwCiAgICBpbnQgNTA1MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjM3LTQ5CiAgICAvLyByZXR1cm4gKAogICAgLy8gICAgIDJfNTAwCiAgICAvLyAgICAgKyAoCiAgICAvLyAgICAgICAgICMgZm10OiBvZmYKICAgIC8vICAgICAgICAgIyBLZXkgbGVuZ3RoCiAgICAvLyAgICAgICAgIHNlbGYubGlzdGluZ3Mua2V5X3ByZWZpeC5sZW5ndGggKwogICAgLy8gICAgICAgICAzMiArIDggKyA4ICsKICAgIC8vICAgICAgICAgIyBWYWx1ZSBsZW5ndGgKICAgIC8vICAgICAgICAgOCArIDggKyAzMiArIDggKyA4CiAgICAvLyAgICAgICAgICMgZm10OiBvbgogICAgLy8gICAgICkKICAgIC8vICAgICAqIDQwMAogICAgLy8gKQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLmFsbG93X2Fzc2V0KG1icl9wYXk6IHVpbnQ2NCwgYXNzZXQ6IHVpbnQ2NCkgLT4gdm9pZDoKYWxsb3dfYXNzZXQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo3MS03MgogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIGFsbG93X2Fzc2V0KHNlbGYsIG1icl9wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLCBhc3NldDogQXNzZXQpIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjczCiAgICAvLyBhc3NlcnQgbm90IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuaXNfb3B0ZWRfaW4oYXNzZXQpCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo3NQogICAgLy8gYXNzZXJ0IG1icl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojc2CiAgICAvLyBhc3NlcnQgbWJyX3BheS5hbW91bnQgPT0gR2xvYmFsLmFzc2V0X29wdF9pbl9taW5fYmFsYW5jZQogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgIGdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NzgtODIKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo4MAogICAgLy8gYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo4MQogICAgLy8gYXNzZXRfYW1vdW50PTAsCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo3OAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50IGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojc4LTgyCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5kaWdpdGFsX21hcmtldHBsYWNlLmNvbnRyYWN0LkRpZ2l0YWxNYXJrZXRwbGFjZS5maXJzdF9kZXBvc2l0KG1icl9wYXk6IHVpbnQ2NCwgeGZlcjogdWludDY0LCB1bml0YXJ5X3ByaWNlOiBieXRlcywgbm9uY2U6IGJ5dGVzKSAtPiB2b2lkOgpmaXJzdF9kZXBvc2l0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6ODQtOTEKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBmaXJzdF9kZXBvc2l0KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgbWJyX3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sCiAgICAvLyAgICAgeGZlcjogZ3R4bi5Bc3NldFRyYW5zZmVyVHJhbnNhY3Rpb24sCiAgICAvLyAgICAgdW5pdGFyeV9wcmljZTogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgbm9uY2U6IGFyYzQuVUludDY0LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gNCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo5MgogICAgLy8gYXNzZXJ0IG1icl9wYXkuc2VuZGVyID09IFR4bi5zZW5kZXIKICAgIGZyYW1lX2RpZyAtNAogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo5MwogICAgLy8gYXNzZXJ0IG1icl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC00CiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojk0CiAgICAvLyBhc3NlcnQgbWJyX3BheS5hbW91bnQgPT0gc2VsZi5saXN0aW5nc19ib3hfbWJyKCkKICAgIGZyYW1lX2RpZyAtNAogICAgZ3R4bnMgQW1vdW50CiAgICBjYWxsc3ViIGxpc3RpbmdzX2JveF9tYnIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojk3CiAgICAvLyBvd25lcj1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo5OAogICAgLy8gYXNzZXQ9YXJjNC5VSW50NjQoeGZlci54ZmVyX2Fzc2V0LmlkKSwKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgWGZlckFzc2V0CiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo5Ni0xMDAKICAgIC8vIGtleSA9IExpc3RpbmdLZXkoCiAgICAvLyAgICAgb3duZXI9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgIGFzc2V0PWFyYzQuVUludDY0KHhmZXIueGZlcl9hc3NldC5pZCksCiAgICAvLyAgICAgbm9uY2U9bm9uY2UsCiAgICAvLyApCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTozMwogICAgLy8gc2VsZi5saXN0aW5ncyA9IEJveE1hcChMaXN0aW5nS2V5LCBMaXN0aW5nVmFsdWUpCiAgICBieXRlICJsaXN0aW5ncyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMzLTEwMQogICAgLy8gICAgIHNlbGYubGlzdGluZ3MgPSBCb3hNYXAoTGlzdGluZ0tleSwgTGlzdGluZ1ZhbHVlKQogICAgLy8gCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGxpc3RpbmdzX2JveF9tYnIoc2VsZikgLT4gVUludDY0OgogICAgLy8gICAgIHJldHVybiAoCiAgICAvLyAgICAgICAgIDJfNTAwCiAgICAvLyAgICAgICAgICsgKAogICAgLy8gICAgICAgICAgICAgIyBmbXQ6IG9mZgogICAgLy8gICAgICAgICAgICAgIyBLZXkgbGVuZ3RoCiAgICAvLyAgICAgICAgICAgICBzZWxmLmxpc3RpbmdzLmtleV9wcmVmaXgubGVuZ3RoICsKICAgIC8vICAgICAgICAgICAgIDMyICsgOCArIDggKwogICAgLy8gICAgICAgICAgICAgIyBWYWx1ZSBsZW5ndGgKICAgIC8vICAgICAgICAgICAgIDggKyA4ICsgMzIgKyA4ICsgOAogICAgLy8gICAgICAgICAgICAgIyBmbXQ6IG9uCiAgICAvLyAgICAgICAgICkKICAgIC8vICAgICAgICAgKiA0MDAKICAgIC8vICAgICApCiAgICAvLyAKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgcXVhbnRpdHlfcHJpY2UoCiAgICAvLyAgICAgc2VsZiwgcXVhbnRpdHk6IFVJbnQ2NCwgcHJpY2U6IFVJbnQ2NCwgYXNzZXRfZGVjaW1hbHM6IFVJbnQ2NAogICAgLy8gKSAtPiBVSW50NjQ6CiAgICAvLyAgICAgYW1vdW50X25vdF9zY2FsZWRfaGlnaCwgYW1vdW50X25vdF9zY2FsZWRfbG93ID0gb3AubXVsdyhwcmljZSwgcXVhbnRpdHkpCiAgICAvLyAgICAgc2NhbGluZ19mYWN0b3JfaGlnaCwgc2NhbGluZ19mYWN0b3JfbG93ID0gb3AuZXhwdygxMCwgYXNzZXRfZGVjaW1hbHMpCiAgICAvLyAgICAgX3F1b3RpZW50X2hpZ2gsIGFtb3VudF90b19iZV9wYWlkLCBfcmVtYWluZGVyX2hpZ2gsIF9yZW1haW5kZXJfbG93ID0gb3AuZGl2bW9kdygKICAgIC8vICAgICAgICAgYW1vdW50X25vdF9zY2FsZWRfaGlnaCwKICAgIC8vICAgICAgICAgYW1vdW50X25vdF9zY2FsZWRfbG93LAogICAgLy8gICAgICAgICBzY2FsaW5nX2ZhY3Rvcl9oaWdoLAogICAgLy8gICAgICAgICBzY2FsaW5nX2ZhY3Rvcl9sb3csCiAgICAvLyAgICAgKQogICAgLy8gICAgIGFzc2VydCBub3QgX3F1b3RpZW50X2hpZ2gKICAgIC8vIAogICAgLy8gICAgIHJldHVybiBhbW91bnRfdG9fYmVfcGFpZAogICAgLy8gCiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X2xpc3RpbmdzX21icihzZWxmKSAtPiBVSW50NjQ6CiAgICAvLyAgICAgcmV0dXJuIHNlbGYubGlzdGluZ3NfYm94X21icigpCiAgICAvLyAKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBhbGxvd19hc3NldChzZWxmLCBtYnJfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwgYXNzZXQ6IEFzc2V0KSAtPiBOb25lOgogICAgLy8gICAgIGFzc2VydCBub3QgR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5pc19vcHRlZF9pbihhc3NldCkKICAgIC8vIAogICAgLy8gICAgIGFzc2VydCBtYnJfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICAgICBhc3NlcnQgbWJyX3BheS5hbW91bnQgPT0gR2xvYmFsLmFzc2V0X29wdF9pbl9taW5fYmFsYW5jZQogICAgLy8gCiAgICAvLyAgICAgaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgICAgICBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgICAgICBhc3NldF9hbW91bnQ9MCwKICAgIC8vICAgICApLnN1Ym1pdCgpCiAgICAvLyAKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBmaXJzdF9kZXBvc2l0KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgbWJyX3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sCiAgICAvLyAgICAgeGZlcjogZ3R4bi5Bc3NldFRyYW5zZmVyVHJhbnNhY3Rpb24sCiAgICAvLyAgICAgdW5pdGFyeV9wcmljZTogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgbm9uY2U6IGFyYzQuVUludDY0LAogICAgLy8gKSAtPiBOb25lOgogICAgLy8gICAgIGFzc2VydCBtYnJfcGF5LnNlbmRlciA9PSBUeG4uc2VuZGVyCiAgICAvLyAgICAgYXNzZXJ0IG1icl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gICAgIGFzc2VydCBtYnJfcGF5LmFtb3VudCA9PSBzZWxmLmxpc3RpbmdzX2JveF9tYnIoKQogICAgLy8gCiAgICAvLyAgICAga2V5ID0gTGlzdGluZ0tleSgKICAgIC8vICAgICAgICAgb3duZXI9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgICAgICBhc3NldD1hcmM0LlVJbnQ2NCh4ZmVyLnhmZXJfYXNzZXQuaWQpLAogICAgLy8gICAgICAgICBub25jZT1ub25jZSwKICAgIC8vICAgICApCiAgICAvLyAgICAgYXNzZXJ0IGtleSBub3QgaW4gc2VsZi5saXN0aW5ncwogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTAxCiAgICAvLyBhc3NlcnQga2V5IG5vdCBpbiBzZWxmLmxpc3RpbmdzCiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwMwogICAgLy8gYXNzZXJ0IHhmZXIuc2VuZGVyID09IFR4bi5zZW5kZXIKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMDQKICAgIC8vIGFzc2VydCB4ZmVyLmFzc2V0X3JlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQXNzZXRSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwNQogICAgLy8gYXNzZXJ0IHhmZXIuYXNzZXRfYW1vdW50ID4gMAogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBBc3NldEFtb3VudAogICAgZHVwCiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwOAogICAgLy8gZGVwb3NpdGVkPWFyYzQuVUludDY0KHhmZXIuYXNzZXRfYW1vdW50KSwKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjExMAogICAgLy8gYmlkZGVyPWFyYzQuQWRkcmVzcygpLAogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMDctMTEzCiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0gPSBMaXN0aW5nVmFsdWUoCiAgICAvLyAgICAgZGVwb3NpdGVkPWFyYzQuVUludDY0KHhmZXIuYXNzZXRfYW1vdW50KSwKICAgIC8vICAgICB1bml0YXJ5X3ByaWNlPXVuaXRhcnlfcHJpY2UsCiAgICAvLyAgICAgYmlkZGVyPWFyYzQuQWRkcmVzcygpLAogICAgLy8gICAgIGJpZD1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIGJpZF91bml0YXJ5X3ByaWNlPWFyYzQuVUludDY0KCksCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTEKICAgIC8vIGJpZD1hcmM0LlVJbnQ2NCgpLAogICAgYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwNy0xMTMKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XSA9IExpc3RpbmdWYWx1ZSgKICAgIC8vICAgICBkZXBvc2l0ZWQ9YXJjNC5VSW50NjQoeGZlci5hc3NldF9hbW91bnQpLAogICAgLy8gICAgIHVuaXRhcnlfcHJpY2U9dW5pdGFyeV9wcmljZSwKICAgIC8vICAgICBiaWRkZXI9YXJjNC5BZGRyZXNzKCksCiAgICAvLyAgICAgYmlkPWFyYzQuVUludDY0KCksCiAgICAvLyAgICAgYmlkX3VuaXRhcnlfcHJpY2U9YXJjNC5VSW50NjQoKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTEyCiAgICAvLyBiaWRfdW5pdGFyeV9wcmljZT1hcmM0LlVJbnQ2NCgpLAogICAgYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwNy0xMTMKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XSA9IExpc3RpbmdWYWx1ZSgKICAgIC8vICAgICBkZXBvc2l0ZWQ9YXJjNC5VSW50NjQoeGZlci5hc3NldF9hbW91bnQpLAogICAgLy8gICAgIHVuaXRhcnlfcHJpY2U9dW5pdGFyeV9wcmljZSwKICAgIC8vICAgICBiaWRkZXI9YXJjNC5BZGRyZXNzKCksCiAgICAvLyAgICAgYmlkPWFyYzQuVUludDY0KCksCiAgICAvLyAgICAgYmlkX3VuaXRhcnlfcHJpY2U9YXJjNC5VSW50NjQoKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLmRlcG9zaXQoeGZlcjogdWludDY0LCBub25jZTogYnl0ZXMpIC0+IHZvaWQ6CmRlcG9zaXQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTUtMTE2CiAgICAvLyBAYWJpbWV0aG9kCiAgICAvLyBkZWYgZGVwb3NpdChzZWxmLCB4ZmVyOiBndHhuLkFzc2V0VHJhbnNmZXJUcmFuc2FjdGlvbiwgbm9uY2U6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTgKICAgIC8vIG93bmVyPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjExOQogICAgLy8gYXNzZXQ9YXJjNC5VSW50NjQoeGZlci54ZmVyX2Fzc2V0LmlkKSwKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgWGZlckFzc2V0CiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTctMTIxCiAgICAvLyBrZXkgPSBMaXN0aW5nS2V5KAogICAgLy8gICAgIG93bmVyPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgICBhc3NldD1hcmM0LlVJbnQ2NCh4ZmVyLnhmZXJfYXNzZXQuaWQpLAogICAgLy8gICAgIG5vbmNlPW5vbmNlLAogICAgLy8gKQogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTIzCiAgICAvLyBhc3NlcnQgeGZlci5zZW5kZXIgPT0gVHhuLnNlbmRlcgogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNAogICAgLy8gYXNzZXJ0IHhmZXIuYXNzZXRfcmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBc3NldFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTI1CiAgICAvLyBhc3NlcnQgeGZlci5hc3NldF9hbW91bnQgPiAwCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIEFzc2V0QW1vdW50CiAgICBkdXAKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYubGlzdGluZ3MgPSBCb3hNYXAoTGlzdGluZ0tleSwgTGlzdGluZ1ZhbHVlKQogICAgYnl0ZSAibGlzdGluZ3MiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMjgKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XS5kZXBvc2l0ZWQubmF0aXZlICsgeGZlci5hc3NldF9hbW91bnQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxpc3RpbmdzIGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICB1bmNvdmVyIDIKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNy0xMjkKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XS5kZXBvc2l0ZWQgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBzZWxmLmxpc3RpbmdzW2tleV0uZGVwb3NpdGVkLm5hdGl2ZSArIHhmZXIuYXNzZXRfYW1vdW50CiAgICAvLyApCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMjcKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XS5kZXBvc2l0ZWQgPSBhcmM0LlVJbnQ2NCgKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5saXN0aW5ncyBlbnRyeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNy0xMjkKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XS5kZXBvc2l0ZWQgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBzZWxmLmxpc3RpbmdzW2tleV0uZGVwb3NpdGVkLm5hdGl2ZSArIHhmZXIuYXNzZXRfYW1vdW50CiAgICAvLyApCiAgICBzd2FwCiAgICByZXBsYWNlMiAwCiAgICBib3hfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2Uuc2V0X3ByaWNlKGFzc2V0OiB1aW50NjQsIG5vbmNlOiBieXRlcywgdW5pdGFyeV9wcmljZTogYnl0ZXMpIC0+IHZvaWQ6CnNldF9wcmljZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzMS0xMzQKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBzZXRfcHJpY2UoCiAgICAvLyAgICAgc2VsZiwgYXNzZXQ6IEFzc2V0LCBub25jZTogYXJjNC5VSW50NjQsIHVuaXRhcnlfcHJpY2U6IGFyYzQuVUludDY0CiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzNgogICAgLy8gb3duZXI9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTM3CiAgICAvLyBhc3NldD1hcmM0LlVJbnQ2NChhc3NldC5pZCksCiAgICBmcmFtZV9kaWcgLTMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzNS0xMzkKICAgIC8vIGtleSA9IExpc3RpbmdLZXkoCiAgICAvLyAgICAgb3duZXI9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgIGFzc2V0PWFyYzQuVUludDY0KGFzc2V0LmlkKSwKICAgIC8vICAgICBub25jZT1ub25jZSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMzCiAgICAvLyBzZWxmLmxpc3RpbmdzID0gQm94TWFwKExpc3RpbmdLZXksIExpc3RpbmdWYWx1ZSkKICAgIGJ5dGUgImxpc3RpbmdzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTQxCiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0udW5pdGFyeV9wcmljZSA9IHVuaXRhcnlfcHJpY2UKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5saXN0aW5ncyBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgcmVwbGFjZTIgOAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLmJ1eShvd25lcjogYnl0ZXMsIGFzc2V0OiB1aW50NjQsIG5vbmNlOiBieXRlcywgYnV5X3BheTogdWludDY0LCBxdWFudGl0eTogdWludDY0KSAtPiB2b2lkOgpidXk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNDMtMTUxCiAgICAvLyBAYWJpbWV0aG9kCiAgICAvLyBkZWYgYnV5KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgb3duZXI6IGFyYzQuQWRkcmVzcywKICAgIC8vICAgICBhc3NldDogQXNzZXQsCiAgICAvLyAgICAgbm9uY2U6IGFyYzQuVUludDY0LAogICAgLy8gICAgIGJ1eV9wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLAogICAgLy8gICAgIHF1YW50aXR5OiBVSW50NjQsCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byA1IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE1NAogICAgLy8gYXNzZXQ9YXJjNC5VSW50NjQoYXNzZXQuaWQpLAogICAgZnJhbWVfZGlnIC00CiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNTItMTU2CiAgICAvLyBrZXkgPSBMaXN0aW5nS2V5KAogICAgLy8gICAgIG93bmVyPW93bmVyLAogICAgLy8gICAgIGFzc2V0PWFyYzQuVUludDY0KGFzc2V0LmlkKSwKICAgIC8vICAgICBub25jZT1ub25jZSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtNQogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYubGlzdGluZ3MgPSBCb3hNYXAoTGlzdGluZ0tleSwgTGlzdGluZ1ZhbHVlKQogICAgYnl0ZSAibGlzdGluZ3MiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNTgKICAgIC8vIGxpc3RpbmcgPSBzZWxmLmxpc3RpbmdzW2tleV0uY29weSgpCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubGlzdGluZ3MgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNjEKICAgIC8vIHF1YW50aXR5LCBsaXN0aW5nLnVuaXRhcnlfcHJpY2UubmF0aXZlLCBhc3NldC5kZWNpbWFscwogICAgZHVwCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtNAogICAgYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCiAgICBhc3NlcnQgLy8gYXNzZXQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNjAtMTYyCiAgICAvLyBhbW91bnRfdG9fYmVfcGFpZCA9IHNlbGYucXVhbnRpdHlfcHJpY2UoCiAgICAvLyAgICAgcXVhbnRpdHksIGxpc3RpbmcudW5pdGFyeV9wcmljZS5uYXRpdmUsIGFzc2V0LmRlY2ltYWxzCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvdmVyIDIKICAgIGNhbGxzdWIgcXVhbnRpdHlfcHJpY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE2NAogICAgLy8gYXNzZXJ0IGJ1eV9wYXkuc2VuZGVyID09IFR4bi5zZW5kZXIKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNjUKICAgIC8vIGFzc2VydCBidXlfcGF5LnJlY2VpdmVyLmJ5dGVzID09IG93bmVyLmJ5dGVzCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgLTUKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE2NgogICAgLy8gYXNzZXJ0IGJ1eV9wYXkuYW1vdW50ID09IGFtb3VudF90b19iZV9wYWlkCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIEFtb3VudAogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTY4CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0uZGVwb3NpdGVkID0gYXJjNC5VSW50NjQobGlzdGluZy5kZXBvc2l0ZWQubmF0aXZlIC0gcXVhbnRpdHkpCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMQogICAgLQogICAgaXRvYgogICAgZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxpc3RpbmdzIGVudHJ5IGV4aXN0cwogICAgc3dhcAogICAgcmVwbGFjZTIgMAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTcwLTE3NAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9cXVhbnRpdHksCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNzIKICAgIC8vIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgZnJhbWVfZGlnIC00CiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTcwCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBpbnQgYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTcwLTE3NAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9cXVhbnRpdHksCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLnF1YW50aXR5X3ByaWNlKHF1YW50aXR5OiB1aW50NjQsIHByaWNlOiB1aW50NjQsIGFzc2V0X2RlY2ltYWxzOiB1aW50NjQpIC0+IHVpbnQ2NDoKcXVhbnRpdHlfcHJpY2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo1MS01NAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBxdWFudGl0eV9wcmljZSgKICAgIC8vICAgICBzZWxmLCBxdWFudGl0eTogVUludDY0LCBwcmljZTogVUludDY0LCBhc3NldF9kZWNpbWFsczogVUludDY0CiAgICAvLyApIC0+IFVJbnQ2NDoKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NTUKICAgIC8vIGFtb3VudF9ub3Rfc2NhbGVkX2hpZ2gsIGFtb3VudF9ub3Rfc2NhbGVkX2xvdyA9IG9wLm11bHcocHJpY2UsIHF1YW50aXR5KQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTMKICAgIG11bHcKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjU2CiAgICAvLyBzY2FsaW5nX2ZhY3Rvcl9oaWdoLCBzY2FsaW5nX2ZhY3Rvcl9sb3cgPSBvcC5leHB3KDEwLCBhc3NldF9kZWNpbWFscykKICAgIGludCAxMAogICAgZnJhbWVfZGlnIC0xCiAgICBleHB3CiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo1Ny02MgogICAgLy8gX3F1b3RpZW50X2hpZ2gsIGFtb3VudF90b19iZV9wYWlkLCBfcmVtYWluZGVyX2hpZ2gsIF9yZW1haW5kZXJfbG93ID0gb3AuZGl2bW9kdygKICAgIC8vICAgICBhbW91bnRfbm90X3NjYWxlZF9oaWdoLAogICAgLy8gICAgIGFtb3VudF9ub3Rfc2NhbGVkX2xvdywKICAgIC8vICAgICBzY2FsaW5nX2ZhY3Rvcl9oaWdoLAogICAgLy8gICAgIHNjYWxpbmdfZmFjdG9yX2xvdywKICAgIC8vICkKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMwogICAgZGl2bW9kdwogICAgcG9wbiAyCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo2MwogICAgLy8gYXNzZXJ0IG5vdCBfcXVvdGllbnRfaGlnaAogICAgIQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo2NQogICAgLy8gcmV0dXJuIGFtb3VudF90b19iZV9wYWlkCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2Uud2l0aGRyYXcoYXNzZXQ6IHVpbnQ2NCwgbm9uY2U6IGJ5dGVzKSAtPiB2b2lkOgp3aXRoZHJhdzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE3Ni0xNzcKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiB3aXRoZHJhdyhzZWxmLCBhc3NldDogQXNzZXQsIG5vbmNlOiBhcmM0LlVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTc5CiAgICAvLyBvd25lcj1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxODAKICAgIC8vIGFzc2V0PWFyYzQuVUludDY0KGFzc2V0LmlkKSwKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTc4LTE4MgogICAgLy8ga2V5ID0gTGlzdGluZ0tleSgKICAgIC8vICAgICBvd25lcj1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgICAgYXNzZXQ9YXJjNC5VSW50NjQoYXNzZXQuaWQpLAogICAgLy8gICAgIG5vbmNlPW5vbmNlLAogICAgLy8gKQogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYubGlzdGluZ3MgPSBCb3hNYXAoTGlzdGluZ0tleSwgTGlzdGluZ1ZhbHVlKQogICAgYnl0ZSAibGlzdGluZ3MiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxODQKICAgIC8vIGxpc3RpbmcgPSBzZWxmLmxpc3RpbmdzW2tleV0uY29weSgpCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxpc3RpbmdzIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTg1CiAgICAvLyBpZiBsaXN0aW5nLmJpZGRlciAhPSBhcmM0LkFkZHJlc3MoKToKICAgIGV4dHJhY3QgMTYgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGJ6IHdpdGhkcmF3X2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTg3CiAgICAvLyBsaXN0aW5nLmJpZC5uYXRpdmUsCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBleHRyYWN0IDQ4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxODgKICAgIC8vIGxpc3RpbmcuYmlkX3VuaXRhcnlfcHJpY2UubmF0aXZlLAogICAgZXh0cmFjdCA1NiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTg5CiAgICAvLyBhc3NldC5kZWNpbWFscywKICAgIGZyYW1lX2RpZyAtMgogICAgYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCiAgICBhc3NlcnQgLy8gYXNzZXQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxODYtMTkwCiAgICAvLyBjdXJyZW50X2JpZF9kZXBvc2l0ID0gc2VsZi5xdWFudGl0eV9wcmljZSgKICAgIC8vICAgICBsaXN0aW5nLmJpZC5uYXRpdmUsCiAgICAvLyAgICAgbGlzdGluZy5iaWRfdW5pdGFyeV9wcmljZS5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXQuZGVjaW1hbHMsCiAgICAvLyApCiAgICBjYWxsc3ViIHF1YW50aXR5X3ByaWNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxOTEtMTkzCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9bGlzdGluZy5iaWRkZXIubmF0aXZlLCBhbW91bnQ9Y3VycmVudF9iaWRfZGVwb3NpdAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGZyYW1lX2RpZyAyCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxOTEKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludCBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTkxLTE5MwogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPWxpc3RpbmcuYmlkZGVyLm5hdGl2ZSwgYW1vdW50PWN1cnJlbnRfYmlkX2RlcG9zaXQKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0Cgp3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxOTUKICAgIC8vIGRlbCBzZWxmLmxpc3RpbmdzW2tleV0KICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE5NwogICAgLy8gaXR4bi5QYXltZW50KHJlY2VpdmVyPVR4bi5zZW5kZXIsIGFtb3VudD1zZWxmLmxpc3RpbmdzX2JveF9tYnIoKSkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIHR4biBTZW5kZXIKICAgIGNhbGxzdWIgbGlzdGluZ3NfYm94X21icgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGludCBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE5OS0yMDMKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PWxpc3RpbmcuZGVwb3NpdGVkLm5hdGl2ZSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIwMQogICAgLy8gYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIwMgogICAgLy8gYXNzZXRfYW1vdW50PWxpc3RpbmcuZGVwb3NpdGVkLm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTk5CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBpbnQgYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTk5LTIwMwogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9bGlzdGluZy5kZXBvc2l0ZWQubmF0aXZlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5kaWdpdGFsX21hcmtldHBsYWNlLmNvbnRyYWN0LkRpZ2l0YWxNYXJrZXRwbGFjZS5iaWQob3duZXI6IGJ5dGVzLCBhc3NldDogdWludDY0LCBub25jZTogYnl0ZXMsIGJpZF9wYXk6IHVpbnQ2NCwgcXVhbnRpdHk6IGJ5dGVzLCB1bml0YXJ5X3ByaWNlOiBieXRlcykgLT4gdm9pZDoKYmlkOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjA1LTIxNAogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIGJpZCgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIG93bmVyOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgICAgYXNzZXQ6IEFzc2V0LAogICAgLy8gICAgIG5vbmNlOiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBiaWRfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICBxdWFudGl0eTogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgdW5pdGFyeV9wcmljZTogYXJjNC5VSW50NjQsCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byA2IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIxNQogICAgLy8ga2V5ID0gTGlzdGluZ0tleShvd25lciwgYXJjNC5VSW50NjQoYXNzZXQuaWQpLCBub25jZSkKICAgIGZyYW1lX2RpZyAtNQogICAgaXRvYgogICAgZnJhbWVfZGlnIC02CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTozMwogICAgLy8gc2VsZi5saXN0aW5ncyA9IEJveE1hcChMaXN0aW5nS2V5LCBMaXN0aW5nVmFsdWUpCiAgICBieXRlICJsaXN0aW5ncyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIxNwogICAgLy8gbGlzdGluZyA9IHNlbGYubGlzdGluZ3Nba2V5XS5jb3B5KCkKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubGlzdGluZ3MgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMTgKICAgIC8vIGlmIGxpc3RpbmcuYmlkZGVyICE9IGFyYzQuQWRkcmVzcygpOgogICAgZXh0cmFjdCAxNiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYnogYmlkX2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjE5CiAgICAvLyBhc3NlcnQgdW5pdGFyeV9wcmljZSA+IGxpc3RpbmcuYmlkX3VuaXRhcnlfcHJpY2UKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGV4dHJhY3QgNTYgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMQogICAgZGlnIDEKICAgIGI+CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIyMgogICAgLy8gbGlzdGluZy5iaWQubmF0aXZlLCBsaXN0aW5nLmJpZF91bml0YXJ5X3ByaWNlLm5hdGl2ZSwgYXNzZXQuZGVjaW1hbHMKICAgIHN3YXAKICAgIGV4dHJhY3QgNDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHN3YXAKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtNQogICAgYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCiAgICBhc3NlcnQgLy8gYXNzZXQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMjEtMjIzCiAgICAvLyBjdXJyZW50X2JpZF9hbW91bnQgPSBzZWxmLnF1YW50aXR5X3ByaWNlKAogICAgLy8gICAgIGxpc3RpbmcuYmlkLm5hdGl2ZSwgbGlzdGluZy5iaWRfdW5pdGFyeV9wcmljZS5uYXRpdmUsIGFzc2V0LmRlY2ltYWxzCiAgICAvLyApCiAgICBjYWxsc3ViIHF1YW50aXR5X3ByaWNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMjUtMjI3CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9bGlzdGluZy5iaWRkZXIubmF0aXZlLCBhbW91bnQ9Y3VycmVudF9iaWRfYW1vdW50CiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgZnJhbWVfZGlnIDIKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIyNQogICAgLy8gaXR4bi5QYXltZW50KAogICAgaW50IHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMjUtMjI3CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9bGlzdGluZy5iaWRkZXIubmF0aXZlLCBhbW91bnQ9Y3VycmVudF9iaWRfYW1vdW50CiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKYmlkX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIzMAogICAgLy8gcXVhbnRpdHkubmF0aXZlLCB1bml0YXJ5X3ByaWNlLm5hdGl2ZSwgYXNzZXQuZGVjaW1hbHMKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTUKICAgIGFzc2V0X3BhcmFtc19nZXQgQXNzZXREZWNpbWFscwogICAgYXNzZXJ0IC8vIGFzc2V0IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjI5LTIzMQogICAgLy8gYW1vdW50X3RvX2JlX2JpZCA9IHNlbGYucXVhbnRpdHlfcHJpY2UoCiAgICAvLyAgICAgcXVhbnRpdHkubmF0aXZlLCB1bml0YXJ5X3ByaWNlLm5hdGl2ZSwgYXNzZXQuZGVjaW1hbHMKICAgIC8vICkKICAgIGNhbGxzdWIgcXVhbnRpdHlfcHJpY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIzMwogICAgLy8gYXNzZXJ0IGJpZF9wYXkuc2VuZGVyID09IFR4bi5zZW5kZXIKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMzQKICAgIC8vIGFzc2VydCBiaWRfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMzUKICAgIC8vIGFzc2VydCBiaWRfcGF5LmFtb3VudCA9PSBhbW91bnRfdG9fYmVfYmlkCiAgICBmcmFtZV9kaWcgLTMKICAgIGd0eG5zIEFtb3VudAogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjM3CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0uYmlkZGVyID0gYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5saXN0aW5ncyBlbnRyeSBleGlzdHMKICAgIHR4biBTZW5kZXIKICAgIHJlcGxhY2UyIDE2CiAgICBkaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjM4CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0uYmlkID0gcXVhbnRpdHkKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubGlzdGluZ3MgZW50cnkgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTIKICAgIHJlcGxhY2UyIDQ4CiAgICBkaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjM5CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0uYmlkX3VuaXRhcnlfcHJpY2UgPSB1bml0YXJ5X3ByaWNlCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxpc3RpbmdzIGVudHJ5IGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICByZXBsYWNlMiA1NgogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLmFjY2VwdF9iaWQoYXNzZXQ6IHVpbnQ2NCwgbm9uY2U6IGJ5dGVzKSAtPiB2b2lkOgphY2NlcHRfYmlkOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjQxLTI0MgogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIGFjY2VwdF9iaWQoc2VsZiwgYXNzZXQ6IEFzc2V0LCBub25jZTogYXJjNC5VSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI0MwogICAgLy8ga2V5ID0gTGlzdGluZ0tleShhcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksIGFyYzQuVUludDY0KGFzc2V0LmlkKSwgbm9uY2UpCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMzCiAgICAvLyBzZWxmLmxpc3RpbmdzID0gQm94TWFwKExpc3RpbmdLZXksIExpc3RpbmdWYWx1ZSkKICAgIGJ5dGUgImxpc3RpbmdzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjQ1CiAgICAvLyBsaXN0aW5nID0gc2VsZi5saXN0aW5nc1trZXldLmNvcHkoKQogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5saXN0aW5ncyBlbnRyeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI0NgogICAgLy8gYXNzZXJ0IGxpc3RpbmcuYmlkZGVyICE9IGFyYzQuQWRkcmVzcygpCiAgICBkdXAKICAgIGV4dHJhY3QgMTYgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjUwCiAgICAvLyBpZiBsaXN0aW5nLmRlcG9zaXRlZC5uYXRpdmUgPCBsaXN0aW5nLmJpZC5uYXRpdmUKICAgIGR1cAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgZXh0cmFjdCA0OCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZHVwCiAgICBjb3ZlciAyCiAgICA8CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNDktMjUxCiAgICAvLyBsaXN0aW5nLmRlcG9zaXRlZC5uYXRpdmUKICAgIC8vIGlmIGxpc3RpbmcuZGVwb3NpdGVkLm5hdGl2ZSA8IGxpc3RpbmcuYmlkLm5hdGl2ZQogICAgLy8gZWxzZSBsaXN0aW5nLmJpZC5uYXRpdmUKICAgIGJ6IGFjY2VwdF9iaWRfdGVybmFyeV9mYWxzZUAyCiAgICBmcmFtZV9kaWcgMwogICAgYiBhY2NlcHRfYmlkX3Rlcm5hcnlfbWVyZ2VAMwoKYWNjZXB0X2JpZF90ZXJuYXJ5X2ZhbHNlQDI6CiAgICBmcmFtZV9kaWcgNAoKYWNjZXB0X2JpZF90ZXJuYXJ5X21lcmdlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNTQKICAgIC8vIG1pbl9xdWFudGl0eSwgbGlzdGluZy5iaWRfdW5pdGFyeV9wcmljZS5uYXRpdmUsIGFzc2V0LmRlY2ltYWxzCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCA1NiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZnJhbWVfZGlnIC0yCiAgICBhc3NldF9wYXJhbXNfZ2V0IEFzc2V0RGVjaW1hbHMKICAgIGFzc2VydCAvLyBhc3NldCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI1My0yNTUKICAgIC8vIGJlc3RfYmlkX2Ftb3VudCA9IHNlbGYucXVhbnRpdHlfcHJpY2UoCiAgICAvLyAgICAgbWluX3F1YW50aXR5LCBsaXN0aW5nLmJpZF91bml0YXJ5X3ByaWNlLm5hdGl2ZSwgYXNzZXQuZGVjaW1hbHMKICAgIC8vICkKICAgIGRpZyAyCiAgICBjb3ZlciAyCiAgICBjYWxsc3ViIHF1YW50aXR5X3ByaWNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNTcKICAgIC8vIGl0eG4uUGF5bWVudChyZWNlaXZlcj1UeG4uc2VuZGVyLCBhbW91bnQ9YmVzdF9iaWRfYW1vdW50KS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgdHhuIFNlbmRlcgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGludCBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI1OS0yNjMKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPWxpc3RpbmcuYmlkZGVyLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9bWluX3F1YW50aXR5LAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBmcmFtZV9kaWcgMgogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNTkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludCBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNTktMjYzCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1saXN0aW5nLmJpZGRlci5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PW1pbl9xdWFudGl0eSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNjYKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XS5kZXBvc2l0ZWQubmF0aXZlIC0gbWluX3F1YW50aXR5CiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5saXN0aW5ncyBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZGlnIDIKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI2NS0yNjcKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XS5kZXBvc2l0ZWQgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBzZWxmLmxpc3RpbmdzW2tleV0uZGVwb3NpdGVkLm5hdGl2ZSAtIG1pbl9xdWFudGl0eQogICAgLy8gKQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjY1CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0uZGVwb3NpdGVkID0gYXJjNC5VSW50NjQoCiAgICBkaWcgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubGlzdGluZ3MgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNjUtMjY3CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0uZGVwb3NpdGVkID0gYXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi5saXN0aW5nc1trZXldLmRlcG9zaXRlZC5uYXRpdmUgLSBtaW5fcXVhbnRpdHkKICAgIC8vICkKICAgIHN3YXAKICAgIHJlcGxhY2UyIDAKICAgIGRpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNjkKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XS5iaWQubmF0aXZlIC0gbWluX3F1YW50aXR5CiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxpc3RpbmdzIGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCA0OCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgdW5jb3ZlciAyCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyNjgtMjcwCiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0uYmlkID0gYXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi5saXN0aW5nc1trZXldLmJpZC5uYXRpdmUgLSBtaW5fcXVhbnRpdHkKICAgIC8vICkKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI2OAogICAgLy8gc2VsZi5saXN0aW5nc1trZXldLmJpZCA9IGFyYzQuVUludDY0KAogICAgZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxpc3RpbmdzIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjY4LTI3MAogICAgLy8gc2VsZi5saXN0aW5nc1trZXldLmJpZCA9IGFyYzQuVUludDY0KAogICAgLy8gICAgIHNlbGYubGlzdGluZ3Nba2V5XS5iaWQubmF0aXZlIC0gbWluX3F1YW50aXR5CiAgICAvLyApCiAgICBzd2FwCiAgICByZXBsYWNlMiA0OAogICAgYm94X3B1dAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2UuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DigitalMarketplace",
        "methods": [
            {
                "name": "get_listings_mbr",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "allow_asset",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "first_deposit",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    },
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deposit",
                "args": [
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_price",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "buy_pay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bid",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "bid_pay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "accept_bid",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}